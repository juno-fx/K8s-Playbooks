---
- name: Ensure the correct state of all nodes in the cluster
  hosts: juno_k3s
  vars:
    # your git credentials
    juno_git_user: "oauth2"
    juno_git_password: "password"
    # https://github.com/juno-fx/Juno-Bootstrap
    juno_bootstrap_git_url: "http://your-git-host.example/git/Juno-Bootstrap.git"
    # http://github.com/juno-fx/genesis-Deployment/
    juno_genesis_deployment_git_url: "http://your-git-host.example/git/Genesis-Deployment.git"
    argo_install_manifest_url: "file://{{ playbook_dir }}/airgap_files/argo-install.yaml"
    k3s_install_script_url: "file://{{ playbook_dir }}/airgap_files/install.sh"
    k3s_binary_url: "file://{{ playbook_dir }}/airgap_files/k3s"
    # k3s_images_url points to the k3s-provided tarball of necessary images
    # For fully airgapped installs,we recommend pointing the cluster at your local registry via k3s_registries_yaml
    k3s_images_url: "file://{{ playbook_dir }}/airgap_files/k3s-airgap-images-amd64.tar.zst"
    # For more details on using a private registry, eg. using authentication, see:
    # https://docs.k3s.io/installation/private-registry
    #
    # An example of how you can leverage it - the below is templated directly into your registries.yml
    #
    # k3s_registries_yaml: |
    #   mirrors:
    #     docker.io:
    #       endpoint:
    #         - "http://{{ proxy_address }}:5000"
    #     quay.io:
    #       endpoint:
    #         - "http://{{ proxy_address }}:5001"
    #     ghcr.io:
    #       endpoint:
    #         - "http://{{ proxy_address }}:5002"
    k3s_airgap_install: true
    juno_bootstrap_chart_values:
      genesis:
        repoURL: "http://{{ proxy_address }}/git/Genesis-Deployment.git"
      #  repoURL: "http://{{ proxy_address }}/git/Genesis-Deployment.git"
      #### Genesis Helm repo branch to deploy  (REQUIRED)
      #  version: "v1.1"
      #  config:
      #    ### Container registry containing the Juno images  (REQUIRED)
      #    registry:
      #    ### Image Pull Secret (Uncomment if using)
      #    # image_pull_secret:
      #    ### hostname of the server: my-genesis.example.com  (REQUIRED)
      #    host:
      #    ### Juno License Key  (REQUIRED)
      #    license_key:
      #    ### Environment Variables
      #    env:
      #    # You must have either Google or AWS Cognito configured.
      #    # Uncomment one of the following (REQUIRED)
      #    ### Google OAuth (Uncomment If using)
      #    #  GOOGLE_CLIENT_ID:
      #    #  GOOGLE_CLIENT_SECRET:
      #    ### AWS Cognito (Uncomment If using)
      #    #  COGNITO_CLIENT_ID:
      #    #  COGNITO_CLIENT_SECRET:
      #    #  COGNITO_ISSUER:
      #    ### LDAP (Uncomment if using | BETA)
      #    #  LDAP_URI:
      #    #  LDAP_BIND_DN:
      #    #  LDAP_BIND_PASSWORD:
      #    #  LDAP_SEARCH_BASE:
      #    #  LDAP_EMAIL_ATTRIBUTE:
      #    #  LDAP_USERNAME_ATTRIBUTE:
      #    # Owner Configuration
      #    titan:
      #      # Username of the owner (REQUIRED)
      #      owner:
      #      # POSIX UID of the owner (REQUIRED)
      #      uid:
      #      # Email of the owner. This should be the email used by either
      #      # of the above configured authentication services. (REQUIRED)
      #      email:
  tasks:
    - name: Check if the join token file exists
      ansible.builtin.stat:
        path: /var/lib/rancher/k3s/server/token
      become: true
      register: stat_k3s_bootstrap_node_token_file
    - name: If the token exists on any node, set the skip_bootstrap variable
      ansible.builtin.set_fact:
        k3s_skip_bootstrap: false
      when: stat_k3s_bootstrap_node_token_file.stat.exists
      run_once: true

    - name: Make k3s_skip_bootstrap available to all hosts
      ansible.builtin.set_fact:
        k3s_skip_bootstrap: "{{ k3s_skip_bootstrap | default(false) }}"
      loop: "{{ ansible_play_hosts }}"
      delegate_to: "{{ item }}"
      run_once: true

    - any_errors_fatal: true
      block:
        - name: If the join token doesn't exist at all, bootstrap the cluster on the 1st control plane node in the inventory
          vars:
            k3s_bootstrap_node: true
          ansible.builtin.include_role:
            name: "juno-fx.juno_k3s"
          when:
            - inventory_hostname == (
                ansible_play_hosts_all
                | map('extract', hostvars)
                | selectattr('k3s_control_plane_node', 'defined')
                | selectattr('k3s_control_plane_node', 'equalto', true)
                | map(attribute='inventory_hostname')
                | list
                | first
              )
            - not stat_k3s_bootstrap_node_token_file.stat.exists
            - k3s_control_plane_node | default(false) | bool
            - not k3s_skip_bootstrap | default(false)

    - name: Check if the join token file exists (again)
      ansible.builtin.stat:
        path: /var/lib/rancher/k3s/server/token
      become: true
      register: stat_k3s_bootstrap_node_token_file

    - name: If the join token file exists across any of the control plane nodes, set the variable
      become: true
      ansible.builtin.slurp:
        src: /var/lib/rancher/k3s/server/token
      when: stat_k3s_bootstrap_node_token_file.stat.exists
      register: slurp_k3s_bootstrap_node_token_file
      run_once: true

    - name: Make the variable available to the play
      ansible.builtin.set_fact:
        k3s_bootstrap_node_token: "{{ slurp_k3s_bootstrap_node_token_file.content | b64decode }}"
        k3s_bootstrap_node_ip: "{{ ansible_default_ipv4.address }}"
      when: stat_k3s_bootstrap_node_token_file.stat.exists
      loop: "{{ ansible_play_hosts }}"
      run_once: true
      delegate_to: "{{ item }}"
    - name: Gather service facts on the control plane nodes
      ansible.builtin.service_facts:
      when: k3s_control_plane_node | default(false) | bool

    - name: Ensure k3s control plane nodes
      vars:
        k3s_join_token: "{{ k3s_bootstrap_node_token }}"
      when:
        - k3s_control_plane_node | default(false) | bool
      ansible.builtin.include_role:
        name: "juno-fx.juno_k3s"

    - name: Ensure k3s worker nodes
      vars:
        k3s_join_token: "{{ k3s_bootstrap_node_token }}"
      when:
        - not k3s_control_plane_node | default(false) | bool
      ansible.builtin.include_role:
        name: "juno-fx.juno_k3s"
